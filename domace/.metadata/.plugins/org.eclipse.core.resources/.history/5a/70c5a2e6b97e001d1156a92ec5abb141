package zadanie8;

import java.lang.reflect.Array;
import java.util.*;

public class ZoznamOdberov {

	/**
	 * List reprezentujuci zoznam odberov
	 */
	private List odbery;

	/**
	 * Konstruktor zoznamu odberov vytvori prazdny ArrayList
	 */
	public ZoznamOdberov() {
		odbery = new ArrayList();
	}

	/**
	 * Pridavanie odberu do list-u
	 * 
	 * @param o
	 */
	public void pridaj(Odber o) {
		odbery.add(o);
	}

	/**
	 * Metoda vrati, kolko odberov sa vykonalo na odbernom mieste zdanom parametrom
	 * 
	 * @param odberneMiesto cislo odberneho miesta
	 * @return pocet odberov, ktore sa vykonali na odbernom mieste odberneMiesto
	 */
	public int pocetOdberovNaMieste(int odberneMiesto) {
		/*
		 * for (int i = 0; i < odbery.size(); i++) {
		 * 
		 * Odber o = (Odber) this.odbery.get(i);
		 * 
		 * if (odberneMiesto == o.getOdberneMiesto()) { sum++; }
		 * 
		 * }
		 */
		int sum = 0;
		for (Object object : odbery) {

			// ak je object v Liste triedy Odber pretypuj ho aby som snim vedel pracovat ako
			// s Odber
			if (object instanceof Odber) {
				Odber o = (Odber) object;

				// ak je odberne miesto take ako hladame
				if (odberneMiesto == o.getOdberneMiesto()) {
					sum++;
				}
			}
		}

		return sum;
	}

	/**
	 * Metoda vrati zoznam mien pozitivne testovanych. Mena sa nenachadzaju na
	 * zozname dupliticne
	 * 
	 * @return zoznam mien pozitivne testovanych, bez duplicit
	 */
	public List pozitivneTestovani() {

		Set<String> mena = new HashSet<String>();

		for (Object object : odbery) {
			if (object instanceof Odber) {
				Odber o = (Odber) object;

				// ak je vysledok pozitivny pridaj meno
				if (o.getVysledok()) {
					mena.add(o.getMenoZamestnanca());
				}
			}

		}

		/*
		 * for (int i = 0; i < odbery.size(); i++) {
		 * 
		 * Odber o = (Odber) this.odbery.get(i);
		 * 
		 * if(o.getVysledok()) { mena.add(o.getMenoZamestnanca()); }
		 * 
		 * }
		 */

		// pretypujem Set na List
		ArrayList<String> vsetci = new ArrayList<>();

		vsetci.addAll(mena);

		return vsetci;
	}

	/**
	 * Metoda vrati priemerny pocet testovanych za den testovania. Ak testujeme v
	 * pondelok 30.11. a piatok 4.12., tak s√∫ to dva dni, pocas ktorych sa
	 * testovalo.
	 * 
	 * @return priemerny pocet testovanych za den testovania
	 */
	public double priemernyPocetTestovZaDenTestovania() {
		// vytvorim si Mapu
		// v podstate tu stacilo spravit iba list ale uvedomil som si to az neskor

		Map<String, Integer> m = new HashMap<>();

		for (Object object : odbery) {
			if (object instanceof Odber) {
				Odber o = (Odber) object;

				// ak mapa neobsahuje datum odber pridaj
				if (!m.containsKey(o.getDatumOdberu())) {
					m.put(o.getDatumOdberu(), 1);
				} else {
					// ak obsahuje daj +1
					m.put(o.getDatumOdberu(), m.get(o.getDatumOdberu()) + 1);
				}
			}
		}

		int pocetDni = m.keySet().size();

		return (double) odbery.size() / pocetDni;
	}

	/**
	 * Metoda vrati zoznam mien vsetkych testovanych, ktori sa zucastnili odberu v
	 * rozmedzi datumov. Mena sa nenachadzaju na zozname dupliticne
	 * 
	 * @param odDatum datum zaciatku, vratane tohto datumu
	 * @param doDatum datum konca, vratane tohto datumu
	 * @return mena testovanych v rozmedzi datumov
	 */
	public List testovaniOdDo(String odDatum, String doDatum) {
		// ??? (1 bod)
		// hint: Pre jednoduchost nepouzivajte triedu Date, ale odporucame datumy
		// prerobit na cislo a pracovat s cislami
		// napr. ak je odDatum "30.11.2020" a doDatum "4.12.2020" a zaujima nas, ci
		// "1.12.2020"
		// je medzi tymito datumami, tak ich prerobime na cisla, 20201130, 20201204,
		// 20201201
		// a zistujeme, ci plati 20201130 <= 20201201 a zaroven 20201201 <= 20201204
		// pozn.: ak chcete znak '.' (bodka) zapisat ako delimiter pre scanner alebo v
		// metode split, tak ju zapisujeme ako "\\." lebo ide o specialny znak
		// pozn.: pri vstupe vzdy plati, ze odDatum <= doDatum

		ArrayList<String> vsetkyMena = new ArrayList<>();

		for (Object object : odbery) {
			if (object instanceof Odber) {
				Odber o = (Odber) object;

				// prechadzam kazdym prvkom v poli a prehodim si datumString datumInt
				int datum = datumAkoCislo(o.getDatumOdberu());

				// ak sa nachadza v casomo intervale
				if (datum >= datumAkoCislo(odDatum) && datum <= datumAkoCislo(doDatum)) {

					// ak sa tam meno este nenachadza tak ho pridaj
					if (!vsetkyMena.contains(o.getMenoZamestnanca()))
						vsetkyMena.add(o.getMenoZamestnanca());
				}

			}
		}

		return vsetkyMena;
	}

	// pomocna metoda pre prehodenie datumu
	private int datumAkoCislo(String s) {

		String[] denMesiacRok = s.split("\\.");

		// ak nahodou mesiac ma len jednu pismeno resp cislicu pridaj 0 pred neho
		if (denMesiacRok[1].length() == 1)
			denMesiacRok[1] = "0" + denMesiacRok[1];

		// ak nahodou den ma len jednu pismeno resp cislicu pridaj 0 pred neho
		if (denMesiacRok[0].length() == 1)
			denMesiacRok[0] = "0" + denMesiacRok[0];

		// dendenMesiacRok[2] je rok denMesiacRok[1] je mesiac a denMesiacRok[0] je den
		String result = denMesiacRok[2] + denMesiacRok[1] + denMesiacRok[0];

		int datumAkoCislo = Integer.parseInt(result);

		return datumAkoCislo;
	}

	/**
	 * Metoda vrati mapu, kde je kazdemu menu priradene kolko testov absolvoval
	 * 
	 * @return mapa osob a ich poctu absolvovanych testov
	 */
	public Map pocetTestovOsoby() {
		Map<String, Integer> m = new HashMap<>();

		for (Object object : odbery) {
			if (object instanceof Odber) {
				Odber o = (Odber) object;

				// ak sa meno nenachadza v mape pridaj meno a nastav hodnotu na 1
				if (!m.containsKey(o.getMenoZamestnanca())) {
					m.put(o.getMenoZamestnanca(), 1);
				} else {
					// ak sa nachadza pridaj mu pocet testov +1
					m.put(o.getMenoZamestnanca(), m.get(o.getMenoZamestnanca()) + 1);
				}
			}
		}
		return m;
	}

	/**
	 * Metoda vrati zoznam mien pozitivne testovanych, ktori mali aspon 2 pozitivne
	 * testy. Mena sa nenachadzaju na zozname dupliticne.
	 * 
	 * @return zoznam mien tych, ktori boli pozitivne testovansi aspon dvakrat, bez
	 *         duplicity mien
	 */
	public List opakovanePozitivny() {

		ArrayList<String> opakovanePozitivny = new ArrayList<>();
		Map<String, Integer> m = new HashMap<>();

		for (Object object : odbery) {
			if (object instanceof Odber) {
				Odber o = (Odber) object;

				// ak je vysledok pozitivny urob
				if (o.getVysledok()) {
					// ak sa nenachadza meno pridaj ho do mapy a nastav poz testu na 1
					if (!m.containsKey(o.getMenoZamestnanca())) {
						m.put(o.getMenoZamestnanca(), 1);
					} else {
						// ak sa nachcadza meno pridaj mu vysledok poz testu +1
						m.put(o.getMenoZamestnanca(), m.get(o.getMenoZamestnanca()) + 1);
					}
				}
			}
		}

		// vsetci ktory maju 2 a viac poz testov uloz meno do arrayListu
		for (String kluc : m.keySet()) {
			if (m.get(kluc) >= 2) {
				opakovanePozitivny.add(kluc);
			}
		}

		return opakovanePozitivny;
	}

	/**
	 * Metoda vrati, ci zamestnanec prekonal nakazu. To znamena, ze mal pozitivny
	 * test v nejaky den a negativny neskor.
	 * 
	 * @param menoZamestnanca
	 * @return
	 */
	public boolean prekonalNakazu(String menoZamestnanca) {
		// Evalvator mi hlasi chybu ale osobne si myslim ze to mam dobre

		// utried pole
		Collections.sort(odbery, new SortItems());

		boolean malPoz = false;

		for (Object object : odbery) {
			if (object instanceof Odber) {
				Odber o = (Odber) object;

				// Hladam iba dneho zamestanca
				if (o.getMenoZamestnanca().equals(menoZamestnanca)) {
					// ak mal pozitivny vysledok nastav boolean na true
					if (o.getVysledok()) {
						malPoz = true;
					} else {
						// ak mal pozitivny vysledok a potom negativny tak prekonal ochorenie
						if (malPoz)
							return true;
					}
				}
			}
		}

		// inak vrat false
		return false;
	}

	// Vytvorim si comparator ktory utriedi zoznam podla datumu
	public class SortItems implements Comparator<Odber> {

		@Override
		public int compare(Odber o1, Odber o2) {

			return o1.getDatumOdberu().compareTo(o2.getDatumOdberu());
		}

	}

	/**
	 * Metoda vrati zoznam tych mien z vyberu zamestnancov, ktori este neabsolvovali
	 * ziaden odber.
	 * 
	 * @param vyberZamestnancov
	 * @return novy zoznam vytvoreny zo zoznamu vyberZamestancov, bez zamestancov,
	 *         ktori uz absolvovali odber
	 */
	public List bezOdberu(List vyberZamestnancov) {

		ArrayList<String> boliTestovani = new ArrayList<>();

		for (Object object : odbery) {
			if (object instanceof Odber) {
				Odber o = (Odber) object;

				// z odberov vyberiem iba ludi ktori boli testovany
				if (!boliTestovani.contains(o.getMenoZamestnanca())) {
					boliTestovani.add(o.getMenoZamestnanca());
				}

			}
		}

		ArrayList<String> neboliTestovani = new ArrayList<>();

		for (Object object : vyberZamestnancov) {

			if (object instanceof String) {

				String string = (String) object;

				// prechadzam Listom a zistujem ci sa meno objavi v liste boliTestovany
				// ak nie pridam ho do Listu neboli testovany
				if (!boliTestovani.contains(string)) {
					neboliTestovani.add(string);
				}
			}
		}
		return neboliTestovani;
	}

	/**
	 * Metoda vrati zoznam mien zamestnancov, ktori mali pocas toho isteho dna
	 * pozitivny aj negativny test. Mena sa nenachadzaju na zozname dupliticne.
	 * 
	 * @return zoznam mien tych, ktori pocas jedneho dna mali pozitivny aj negativny
	 *         test
	 */
	public List podozrivoTestovani() {
		ArrayList<String> podozrivi = new ArrayList<>();
		
		
		for (Object object : odbery) {
			if (object instanceof Odber) {
				Odber o = (Odber) object;
				
				//2 foreach cykly pre porovnanie kazdenho odberu s kazdym
				
				for (Object object2 : odbery) {
					if (object2 instanceof Odber) {
						Odber o2 = (Odber) object2;
						
						//ak porovnam dva odbery ktore maju meno a datum rovnake ale rozne vysledky tak je podozrivo testovany
						if(o.getMenoZamestnanca().equals(o2.getMenoZamestnanca()) && 
								datumAkoCislo(o.getDatumOdberu()) == datumAkoCislo(o2.getDatumOdberu()) &&
									o.getVysledok() != o2.getVysledok()) {
							
							podozrivi.add(o.getMenoZamestnanca());
							
						}
					}
				}
			}
		}

		return podozrivi;
	}

	/**
	 * Metoda vrati cislo odberneho miesta, kde sa vykonalo najviac odberov. Ak je
	 * takychto pracovisk viac, tak vrati ktorekolvek z nich.
	 * 
	 * @return cislo pracoviska, ktore vykonalo najviac odberov
	 */
	public int najvytazenejsiePracovisko() {
		Map<Integer, Integer> odberneMiesta = new HashMap<>();

		for (Object object : odbery) {
			if (object instanceof Odber) {
				Odber o = (Odber) object;

				if (!odberneMiesta.containsKey(o.getOdberneMiesto())) {
					odberneMiesta.put(o.getOdberneMiesto(), 1);
				} else {
					odberneMiesta.put(o.getOdberneMiesto(), odberneMiesta.get(o.getOdberneMiesto()) + 1);
				}
			}
		}

		int pracovisko = 0;
		int max = 0;

		for (Integer kluc : odberneMiesta.keySet()) {
			if (odberneMiesta.get(kluc) > max) {
				max = odberneMiesta.get(kluc);
				pracovisko = kluc;
			}
		}

		return pracovisko;
	}

}
